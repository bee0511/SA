#!/usr/local/bin/bash

function help() {
cat << EOF
Usage:
- create: zfsbak DATASET [ROTATION_CNT]
- list: zfsbak -l|--list [DATASET|ID|DATASET ID...]
- delete: zfsbak -d|--delete [DATASET|ID|DATASET ID...]
- export: zfsbak -e|--export DATASET [ID]
- import: zfsbak -i|--import FILENAME DATASET
EOF
}

function datetime() {
  date '+%Y-%m-%d-%H:%M:%S'
}

function zfs_snap() {
  echo "Snap $1"
  zfs snapshot "$1"
}

function zfs_destroy() {
  echo "Destroy $1"
  zfs destroy "$1"
}

function zfs_list() {
  zfs list -H -o name -r -t snapshot "$1" | grep "$1@zfsbak_" | awk '{print NR "\t" $0}' | grep "^$2"
}

function zfsbak_create() {
  # dataset="$1"
  local list=()
  while IFS= read -r line; do
	  list+=("$line")
  done < <(zfs list | grep -v ^NAME | grep "$1" | awk '{print $1}')

  rotation="${2-12}"
  for dataset in "${list[@]}"
  do
	  if [ "$(echo "$dataset" | tr "@" " " | awk '{print $1}')" = "$1" ];then
		  echo "Snap $1@zfsbak_$(datetime)"
	  fi
	  zfs snapshot "$dataset@zfsbak_$(datetime)"
	  #zfs_list "$dataset"
	  for snap in $(zfs_list "$dataset" | grep "${dataset}@" | awk '{ print $2 }' | tail -r | tail -n "+$((rotation+1))" | tail -r);do
		  if [ "$(echo "$dataset" | tr "@" " " | awk '{print $1}')" = "$1" ]; then
			  echo "Destroy $snap"
		  fi
		  zfs destroy "$snap"
	  done
  done

  #for snap in $(zfs_list "$dataset" | awk '{ print $2 }' | tail -r | tail -n "+$((rotation+1))" | tail -r); do
    #zfs_destroy "$snap"
  #done
}

function parse_dataset_id() {
  dataset="${1-mypool}"
  id=""
  if [[ "$dataset" != mypool* ]]; then
    id="$dataset"
    dataset="mypool"
  fi
  if [ $# = 2 ]; then
    id="$2"
  fi
}

function zfsbak_list() {
  parse_dataset_id "$@"
  echo -e "ID\tDATASET\t\tTIME"
  zfs_list "$dataset" "$id" | sed 's/zfsbak_//' | tr '@' '\t'  
  # echo $(zfs_list "$dataset" "$id")
}

function zfsbak_delete() {
  local list=()
  while IFS= read -r line; do
	  list+=("$line")
  done < <(zfs list | grep -v ^NAME | grep "$1" | awk '{print $1}')

  for dataset in "${list[@]}"
  do
	  if [ "$(echo "$dataset" | tr "@" " " | awk '{print $1}')" = "$1" ];then
		  echo "Delete $1@zfsbak_$(datetime)"
	  fi
	  zfs destroy "$dataset@zfsbak_$(datetime)"
	  zfs_list "$dataset"
  done
}

function zfsbak_export() {
      dataset="${1?'dataset'}"
      id="${2-1}"
      snapname="$(zfs_list "$dataset" "$id" | awk '{ print $2 }')"
    timestamp="`echo ${snapname} | cut -d '@' -f 2`"
    # echo "dataset: $dataset, timestamp: $timestamp, snapname: $snapname" 
      EXPORT_PASS=${ZFSBAK_PASS:-''}
      pathname="$HOME/${dataset/\//_}@${timestamp}.zst.aes"
    # rm -fr "$pathname"
     zfs send ${snapname} | zstd -qc - | openssl enc -aes-256-cbc -pbkdf2 -pass "pass:$EXPORT_PASS" -e > "$pathname"
      echo "Export $snapname to $pathname"
}

function zfsbak_import() {
  filename="${1?'filename'}"
  dataset="${2?'dataset'}"

 # echo "filename: $filename, dataset: $dataset" 
   zstd -dcq "$filename" | zfs receive "$dataset" 
  echo "Import $filename to $dataset"
}

case "$1" in
  -l|--list)   shift; zfsbak_list   "$@" ;;
  -d|--delete) shift; zfsbak_delete "$@" ;;
  -e|--export) shift; zfsbak_export "$@" ;;
  -i|--import) shift; zfsbak_import "$@" ;;
  *)
    if [ $# == 0 ]; then
      help
    else
      zfsbak_create "$@"
    fi
    ;;
esac
